-  description: Stub one
   request:
     url: ^/one$
     method: GET

   response:
     status: 200
     latency: 100
     body: 'One!'

-  description: Stub two
   request:
     url: ^/two$
     method: GET

   response:
     status: 200
     latency: 100
     body: 'Two!'

-  request:
     url: ^/three$
     method: GET

   response:
     status: 200
     latency: 100
     body: 'Three!'

-  uuid: 9136d8b7-f7a7-478d-97a5-53292484aaf6
   request:
     method: GET
     url: /with/configured/uuid/property

   response:
     headers:
       content-type: application/json
     status: 200
     body: >
       {"status" : "OK"}

-  request:
     url: ^/path/to/basic$
     method: GET
     headers:
       # no "Basic" prefix nor explicit encoding in Base64 is required when stubbing,
       # just plain username:password format. Stubby internally encodes the value in Base64
       authorization-basic: "bob:password"
   response:
     headers:
       Content-Type: application/json
     status: 200
     body: Your request with Basic was successfully authorized!

-  request:
     url: ^/path/to/bearer$
     method: GET
     headers:
       # no "Bearer" prefix is required when stubbing, only the auth value.
       # Stubby internally does not modify (encodes) the auth value
       authorization-bearer: "YNZmIzI2Ts0Q=="
   response:
     headers:
       Content-Type: application/json
     status: 200
     body: Your request with Bearer was successfully authorized!

-  request:
     url: ^/path/to/custom$
     method: GET
     headers:
       # custom prefix name is required when stubbing, followed by space & auth value.
       # Stubby internally does not modify (encodes) the auth value
       authorization-custom: "CustomAuthorizationType YNZmIzI2Ts0Q=="
   response:
     headers:
       Content-Type: application/json
     status: 200
     body: Your request with custom authorization type was successfully authorized!